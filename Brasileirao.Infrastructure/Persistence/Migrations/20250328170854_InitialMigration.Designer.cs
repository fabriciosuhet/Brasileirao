// <auto-generated />
using System;
using Brasileirao.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Brasileirao.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BrasileiraoApiDbContext))]
    [Migration("20250328170854_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Brasileirao.Domain.Entities.Campeonato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Campeonatos");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.CampeonatoTime", b =>
                {
                    b.Property<Guid>("CampeonatoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("CampeonatoId", "TimeId");

                    b.HasIndex("TimeId");

                    b.ToTable("CampeonatosTime");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Jogador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroCamisa")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Posicao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("Jogadores");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.JogadorTitulo", b =>
                {
                    b.Property<Guid>("JogadorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TituloId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("JogadorId", "TituloId");

                    b.HasIndex("TituloId");

                    b.ToTable("TitulosJogador");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Time", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.TimeTitulo", b =>
                {
                    b.Property<Guid>("TituloId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("TituloId", "TimeId");

                    b.HasIndex("TimeId");

                    b.ToTable("TitulosTime");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Titulo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataTituto")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Titulos");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.CampeonatoTime", b =>
                {
                    b.HasOne("Brasileirao.Domain.Entities.Campeonato", "Campeonato")
                        .WithMany("CampeonatoTimes")
                        .HasForeignKey("CampeonatoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brasileirao.Domain.Entities.Time", "Time")
                        .WithMany("CampeonatoTimes")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campeonato");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Jogador", b =>
                {
                    b.HasOne("Brasileirao.Domain.Entities.Time", "Time")
                        .WithMany("Jogadores")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.JogadorTitulo", b =>
                {
                    b.HasOne("Brasileirao.Domain.Entities.Jogador", "Jogador")
                        .WithMany("Titulos")
                        .HasForeignKey("JogadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brasileirao.Domain.Entities.Titulo", "Titulo")
                        .WithMany("Jogadores")
                        .HasForeignKey("TituloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jogador");

                    b.Navigation("Titulo");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.TimeTitulo", b =>
                {
                    b.HasOne("Brasileirao.Domain.Entities.Time", "Time")
                        .WithMany("Titulos")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brasileirao.Domain.Entities.Titulo", "Titulo")
                        .WithMany("Times")
                        .HasForeignKey("TituloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Time");

                    b.Navigation("Titulo");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Campeonato", b =>
                {
                    b.Navigation("CampeonatoTimes");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Jogador", b =>
                {
                    b.Navigation("Titulos");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Time", b =>
                {
                    b.Navigation("CampeonatoTimes");

                    b.Navigation("Jogadores");

                    b.Navigation("Titulos");
                });

            modelBuilder.Entity("Brasileirao.Domain.Entities.Titulo", b =>
                {
                    b.Navigation("Jogadores");

                    b.Navigation("Times");
                });
#pragma warning restore 612, 618
        }
    }
}
